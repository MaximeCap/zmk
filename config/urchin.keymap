/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#undef ZMK_BEHAVIORS_KEEP_ALL

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };

        meh_ht: meh_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "MEH_HT";
            bindings = <&meh>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        hyper_ht: hyper_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_HT";
            bindings = <&hyper>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };
    };

    macros {
        meh: meh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LSHIFT &kp LALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LCTRL &kp LSHIFT &kp LALT>;

            label = "MEH";
        };

        esc: esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "ESC";
        };

        hyper: hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&meh &kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&meh &kp LEFT_GUI>;

            label = "HYPER";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <30 31>;
        };

        LBRK {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
            layers = <3>;
            timeout-ms = <150>;
            require-prior-idle-ms = <18>;
        };

        RBRK {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <150>;
            require-prior-idle-ms = <18>;
            layers = <3>;
        };

        LPR {
            bindings = <&kp LPAR>;
            key-positions = <16 17>;
            timeout-ms = <150>;
            require-prior-idle-ms = <18>;
            layers = <3>;
        };

        RPR {
            bindings = <&kp RPAR>;
            key-positions = <17 18>;
            timeout-ms = <150>;
            require-prior-idle-ms = <18>;
            layers = <3>;
        };

        LCAR {
            bindings = <&kp LESS_THAN>;
            key-positions = <26 27>;
            timeout-ms = <150>;
            require-prior-idle-ms = <18>;
            layers = <3>;
        };

        RCAR {
            bindings = <&kp GREATER_THAN>;
            key-positions = <27 28>;
            timeout-ms = <150>;
            require-prior-idle-ms = <18>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R          &kp T      &kp Y        &kp U         &kp I         &hyper_ht 0 O  &meh_ht 0 P
&hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F   &kp G      &kp H        &hmr RSHFT J  &hmr RCTRL K  &hmr LALT L    &hmr LGUI SQT
&kp Z        &kp X        &kp C         &kp V          &kp B      &kp N        &kp M         &kp COMMA     &kp DOT        &kp FSLH
                                        &lt NAV_L TAB  &kp SPACE  &lt 4 ENTER  &lt 3 BSPC
            >;
        };

        nav_layer {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 1  &trans  &trans  &trans          &trans    &trans     &trans     &trans
&trans        &trans          &trans        &trans  &trans  &kp LEFT_ARROW  &kp DOWN  &kp UP     &kp RIGHT  &trans
&out OUT_TOG  &studio_unlock  &trans        &trans  &trans  &trans          &kp HOME  &kp PG_DN  &kp PG_UP  &kp END
                                            &trans  &trans  &kp ESC         &kp DEL
            >;
        };

        other_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&kp LBKT            &kp N7            &kp N8         &kp N9              &kp RBKT   &trans  &trans  &trans  &trans  &trans
&hmr LEFT_GUI SEMI  &hml LEFT_ALT N4  &hml LCTRL N5  &hml LEFT_SHIFT N6  &kp EQUAL  &trans  &trans  &trans  &trans  &trans
&kp GRAVE           &kp N1            &kp N2         &kp N3              &kp BSLH   &trans  &trans  &trans  &trans  &trans
                                                     &kp N0              &kp MINUS  &trans  &trans
            >;
        };

        sym_layer {
            bindings = <
&kp LBRC   &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp RBRC      &trans  &trans  &trans  &trans  &trans
&kp COLON  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp PLUS      &trans  &trans  &trans  &trans  &trans
&kp TILDE  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(BSLH)  &trans  &trans  &trans  &trans  &trans
                                   &kp LS(N0)  &kp UNDER     &trans  &trans
            >;
        };
    };
};
