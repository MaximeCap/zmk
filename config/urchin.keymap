/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/num_word.dtsi>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define DEF 0
#define NUM 1
#define SYS 2
#define NAV 3

#define XXX &none
#define ___ &trans

#define _BT_SEL_KEYS_                                                        \
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR


#define QUICK_TAP_MS 175

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick-tap-ms = <QUICK_TAP_MS>; };

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH1 LH0 RH0 RH1

/* Homerow mods */
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

#include "combos.dtsi"

/* Magic-shift & auto-layer */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)
// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

/* / { */
/*     behaviors { */
/*         hml: homerow_mods_left { */
/*             compatible = "zmk,behavior-hold-tap"; */
/*             #binding-cells = <2>; */
/*             tapping-term-ms = <250>; */
/*             flavor = "tap-preferred"; */
/*             bindings = <&kp>, <&kp>; */
/**/
/*             quick-tap-ms = <175>; */
/*             require-prior-idle-ms = <150>; */
/*         }; */
/**/
/*         meh_ht: meh_ht { */
/*             compatible = "zmk,behavior-hold-tap"; */
/*             label = "MEH_HT"; */
/*             bindings = <&meh>, <&kp>; */
/**/
/*             #binding-cells = <2>; */
/*             tapping-term-ms = <150>; */
/*             flavor = "tap-preferred"; */
/*         }; */
/**/
/*         hyper_ht: hyper_ht { */
/*             compatible = "zmk,behavior-hold-tap"; */
/*             label = "HYPER_HT"; */
/*             bindings = <&hyper>, <&kp>; */
/**/
/*             #binding-cells = <2>; */
/*             tapping-term-ms = <200>; */
/*         }; */
/**/
/*         hmr: homerow_mods_right { */
/*             compatible = "zmk,behavior-hold-tap"; */
/*             bindings = <&kp>, <&kp>; */
/**/
/*             #binding-cells = <2>; */
/*             tapping-term-ms = <250>; */
/*             quick-tap-ms = <175>; */
/*             require-prior-idle-ms = <150>; */
/*             flavor = "tap-preferred"; */
/*         }; */
/*     }; */
/**/
/*     macros { */
/*         meh: meh { */
/*             compatible = "zmk,behavior-macro"; */
/*             #binding-cells = <0>; */
/*             bindings = */
/*                 <&macro_press>, */
/*                 <&kp LCTRL &kp LSHIFT &kp LALT>, */
/*                 <&macro_pause_for_release>, */
/*                 <&macro_release>, */
/*                 <&kp LCTRL &kp LSHIFT &kp LALT>; */
/**/
/*             label = "MEH"; */
/*         }; */
/**/
/*         esc: esc { */
/*             compatible = "zmk,behavior-macro"; */
/*             #binding-cells = <0>; */
/*             bindings = <&none>; */
/*             label = "ESC"; */
/*         }; */
/**/
/*         hyper: hyper { */
/*             compatible = "zmk,behavior-macro"; */
/*             #binding-cells = <0>; */
/*             bindings = */
/*                 <&macro_press>, */
/*                 <&meh &kp LEFT_GUI>, */
/*                 <&macro_pause_for_release>, */
/*                 <&macro_release>, */
/*                 <&meh &kp LEFT_GUI>; */
/**/
/*             label = "HYPER"; */
/*         }; */
/*     }; */

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

ZMK_BASE_LAYER(Base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp E         &kp R         &kp T       ,   &kp Y         &kp U         &kp I         &kp O         &kp P    	  ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G       ,   &kp H         &hmr RSHFT J  &hmr LCTRL K  &hmr LALT L  &hmr LGUI SQT,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp V         &kp B       ,   &kp N         &kp M         &kp COMMA  		&kp DOT    		&qexcl      ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              &lt NAV ENTER &lt SYS SPC ,   SMART_NUM     MAGIC_SHIFT
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)
ZMK_BASE_LAYER(Num,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           &kp N7        &kp N8        &kp N9        ___         ,   ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &hml LGUI N0  &hml LALT N4  &hml LCTRL N5 &hml LSHFT N6 ___         ,   ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           &kp N1        &kp N2        &kp N3        ___         ,   ___           ___           ___           ___           ___         ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___         ,   ___           ___
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)
ZMK_BASE_LAYER(Sys,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                               _BT_SEL_KEYS_                            ,   ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           &bootloader ,   &bootloader   ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           &sys_reset  ,   &sys_reset    ___           ___           ___           ___         ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___         ,   ___           ___
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)
ZMK_BASE_LAYER(Nav,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___         ,   ___           ___           &kp UP        ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___         ,   ___           &kp LEFT      &kp DOWN      &kp RIGHT     ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___         ,   ___           ___           __           ___           ___         ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___         ,   ___           ___
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

    /* combos { */
    /*     compatible = "zmk,combos"; */
    /**/
    /*     esc_combo { */
    /*         bindings = <&kp ESCAPE>; */
    /*         key-positions = <30 31>; */
    /*     }; */
    /**/
    /*     LBRK { */
    /*         bindings = <&kp LEFT_BRACKET>; */
    /*         key-positions = <6 7>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     RBRK { */
    /*         bindings = <&kp RBKT>; */
    /*         key-positions = <7 8>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     LPR { */
    /*         bindings = <&kp LPAR>; */
    /*         key-positions = <16 17>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     RPR { */
    /*         bindings = <&kp RPAR>; */
    /*         key-positions = <17 18>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     LCAR { */
    /*         bindings = <&kp LESS_THAN>; */
    /*         key-positions = <26 27>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     RCAR { */
    /*         bindings = <&kp GREATER_THAN>; */
    /*         key-positions = <27 28>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     semi { */
    /*         bindings = <&kp SEMI>; */
    /*         key-positions = <5 9>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     percent { */
    /*         bindings = <&kp PERCENT>; */
    /*         key-positions = <4 14>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     dollar { */
    /*         bindings = <&kp DOLLAR>; */
    /*         key-positions = <3 13>; */
    /*     }; */
    /**/
    /*     equal { */
    /*         bindings = <&kp EQUAL>; */
    /*         key-positions = <13 23>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /**/
    /*     antonin { */
    /*         bindings = <&kp CARET>; */
    /*         key-positions = <5 15>; */
    /*         timeout-ms = <150>; */
    /*         require-prior-idle-ms = <18>; */
    /*     }; */
    /* }; */

/*     keymap { */
/*         compatible = "zmk,keymap"; */
/**/
/*         default_layer { */
/*             bindings = < */
/* &kp Q        &kp W        &kp E         &kp R          &kp T        &kp Y        &kp U         &kp I         &kp O               &kp P */
/* &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F   &kp G        &kp H        &hmr RSHFT J  &hmr RCTRL K  &hmr LALT L         &hmr LGUI SQT */
/* &kp Z        &kp X        &kp C         &kp V          &kp B        &kp N        &kp M         &kp COMMA     &hyper_ht 0 PERIOD  &meh_ht 0 SLASH */
/*                                         &lt NAV_L TAB  &lt 2 SPACE  &lt 4 ENTER  &lt 3 BSPC */
/*             >; */
/*         }; */
/**/
/*         nav_layer { */
/*             bindings = < */
/* &bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 1  &trans  &trans  &trans          &trans    &trans     &trans     &trans */
/* &trans        &trans          &trans        &trans  &trans  &kp LEFT_ARROW  &kp DOWN  &kp UP     &kp RIGHT  &trans */
/* &out OUT_TOG  &studio_unlock  &trans        &trans  &trans  &trans          &kp HOME  &kp PG_DN  &kp PG_UP  &kp END */
/*                                             &trans  &trans  &kp ESC         &kp DEL */
/*             >; */
/*         }; */
/**/
/*         other_layer { */
/*             bindings = < */
/* &trans        &trans        &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans */
/* &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans  &trans */
/* &trans        &trans        &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans */
/*                                        &trans          &trans  &trans  &trans */
/*             >; */
/*         }; */
/**/
/*         num_layer { */
/*             bindings = < */
/* &kp LBKT            &kp N7            &kp N8         &kp N9              &kp RBKT   &trans  &trans  &trans  &trans  &trans */
/* &hmr LEFT_GUI SEMI  &hml LEFT_ALT N4  &hml LCTRL N5  &hml LEFT_SHIFT N6  &kp EQUAL  &trans  &trans  &trans  &trans  &trans */
/* &kp GRAVE           &kp N1            &kp N2         &kp N3              &kp BSLH   &trans  &trans  &trans  &trans  &trans */
/*                                                      &kp N0              &kp MINUS  &trans  &trans */
/*             >; */
/*         }; */
/**/
/*         sym_layer { */
/*             bindings = < */
/* &kp LBRC   &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp RBRC      &trans  &trans  &trans  &trans  &trans */
/* &kp COLON  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp PLUS      &trans  &trans  &trans  &trans  &trans */
/* &kp TILDE  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(BSLH)  &trans  &trans  &trans  &trans  &trans */
/*                                    &kp LS(N0)  &kp UNDER     &trans  &trans */
/*             >; */
/*         }; */
/*     }; */
/* }; */
